# Created by https://www.toptal.com/developers/gitignore/api/django
# Edit at https://www.toptal.com/developers/gitignore?templates=django

### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / optimized / DLL files
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo

# Django stuff:

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# End of https://www.toptal.com/developers/gitignore/api/django
Sohbet

Yeni Konu≈üma
ü§ì Karma≈üƒ±k bir ≈üeyi a√ßƒ±kla

Yapay zek√¢yƒ± √∂yle a√ßƒ±kla ki, ben de onu altƒ± ya≈üƒ±ndaki √ßocuƒüuma anlatabileyim.


üß† √ñneriler alƒ±n ve yeni fikirler olu≈üturun

L√ºtfen bana d√ºnya √ßapƒ±nda en iyi 10 seyahat fikrini verin


üí≠ √áevir, √∂zetle, dil bilgisi hatalarƒ±nƒ± d√ºzelt ve daha fazlasƒ±...

Fransƒ±zcaya √ßevirin "I love you"


gpt-image
GPT-3.5
Merhaba, bug√ºn size nasƒ±l yardƒ±mcƒ± olabilirim?
python da "|"
gpt-image
GPT-3.5
The "|" operator in Python is a bitwise OR operator. It performs a bitwise OR operation on the corresponding bits of two operands. If either bit is 1, it gives 1, otherwise 0.

You can find more information about the "|" operator in Python in the official Python documentation: 
https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations

Additionally, you may want to check out some tutorials and examples on how to use the "|" operator:
- https://realpython.com/python-bitwise-operators/
- https://www.programiz.com/python-programming/operators
coin image
0
Y√ºkseltme


gpt image
GPT-3.5
Bana herhangi bir ≈üey sor...

Bir ƒ∞nceleme Yap & Kredi Kazan ‚ù§
Sohbet
Sormak
Yazmak
G√∂r√ºnt√º
ChatPDF
G√∂r√º≈ü
Tam Sayfa
Davet Et & Kazan
